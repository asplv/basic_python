'''
1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия. Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
'''
print('task1-----------------------')
from sys import argv

def get_compenstation(hours, salary, bonus):
	return hours * salary + bonus

try:
	script_name, hours, salary, bonus = argv
	hours = int(hours)
	salary = int(salary)
	bonus = int(bonus)
except:
	print("Expected 3 int aruments (hours, salary, bonus)")
	exit(1)

print("Compensation", get_compenstation(hours, salary, bonus))



'''
2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
'''
print('\ntask2-----------------------')
arr = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
filtered = [arr[i] for i in range(len(arr)) if i > 0 and arr[i] > arr[i-1]]
print(filtered)




'''
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.
'''
print('\ntask3-----------------------')
print([i for i in range(20,241) if i%20==0 or i%21==0])




'''
4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
'''
print('\ntask4-----------------------')
arr = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
filtered = [item for item in arr if arr.count(item) == 1]
print(filtered)




'''
5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
'''
print('\ntask5-----------------------')
from functools import reduce
arr = [i for i in range(100,1001) if i%2==0]
print(reduce(lambda p, n: p*n, arr))




'''
6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
'''
print('\ntask6a----------------------')
from itertools import count

start_num = 3
stop_num = 10

for el in count(start_num):
    if el > stop_num:
        break
    else:
        print(el)

print('\ntask6b----------------------')
from itertools import cycle

arr = [7, 8, 9]

c = 0
for el in cycle(arr):
    print(el, c)
    c += 1
    if c > 10:
        break




'''
7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
'''
print('\ntask7-----------------------')
def fact(n):
	result = 1
	for i in range(n):
		result *= i+1
		yield result

n = 4

for el in fact(n):
    print(el)






