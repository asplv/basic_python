'''
1. Создать программно файл в текстовом формате, записать в него построчно данные, вводимые пользователем. Об окончании ввода данных свидетельствует пустая строка.
'''
with open('myfile.txt', 'w') as f:
	st = None
	while st != '':
		st = input()
		f.write(st+'\n')


'''
2. Создать текстовый файл (не программно), сохранить в нем несколько строк, выполнить подсчет количества строк, количества слов в каждой строке.
'''
with open('myfile.txt', 'r') as f:
	lines = 0
	for line in f:
		lines += 1
		print(f'line {lines}, words {len(line[:-1].split())}')



'''
3. Создать текстовый файл (не программно), построчно записать фамилии сотрудников и величину их окладов. Определить, кто из сотрудников имеет оклад менее 20 тыс., вывести фамилии этих сотрудников. Выполнить подсчет средней величины дохода сотрудников.
'''
data = []
with open('myfile.txt', 'r') as f:
	for line in f:
		raw = line[:-1].split()
		raw[1] = int(raw[1])
		if raw[1] >= 20000:
			print(f'{raw[0]}')
		data.append(tuple(raw))

print(sum(s[1] for s in data)/len(data))



'''
4. Создать (не программно) текстовый файл со следующим содержимым:
One — 1
Two — 2
Three — 3
Four — 4
Необходимо написать программу, открывающую файл на чтение и считывающую построчно данные. При этом английские числительные должны заменяться на русские. Новый блок строк должен записываться в новый текстовый файл.
'''
data = []
with open('myfile.txt', 'r') as f_in, open('myfile2.txt', 'w') as f_out:
	dictionary = {
		'One': 'Один',
		'Two': 'Два',
		'Three': 'Три',
		'Four': 'Четыре',
	}
	for line in f_in:
		st = line[:-1]
		for item in dictionary.keys():
			st = st.replace(item, dictionary[item])
		f_out.write(st+'\n')






'''
5. Создать (программно) текстовый файл, записать в него программно набор чисел, разделенных пробелами. Программа должна подсчитывать сумму чисел в файле и выводить ее на экран.
'''
with open('myfile.txt', 'w') as f:
	for i in range(10):
		f.write(str(i) + ' ')

with open('myfile.txt', 'r') as f:
	result = sum(int(item) for item in f.readlines()[0].split())
	print(result)





'''
6. Необходимо создать (не программно) текстовый файл, где каждая строка описывает учебный предмет и наличие лекционных, практических и лабораторных занятий по этому предмету и их количество. Важно, чтобы для каждого предмета не обязательно были все типы занятий. Сформировать словарь, содержащий название предмета и общее количество занятий по нему. Вывести словарь на экран.
Примеры строк файла:
Информатика: 100(л) 50(пр) 20(лаб).
Физика: 30(л) — 10(лаб)
Физкультура: — 30(пр) —

Пример словаря:
{“Информатика”: 170, “Физика”: 40, “Физкультура”: 30}
'''
data = {}
with open('myfile.txt', 'r') as f:
	for line in f:
		data_raw = line[:-1].split()
		subj = data_raw[0]
		lessons_str = ["".join(filter(str.isdigit, item)) for item in data_raw[1:4]]
		lessons = sum(int(item) if item!='' else 0 for item in lessons_str)
		data[subj] = lessons
print(data)



'''
7. Создать (не программно) текстовый файл, в котором каждая строка должна содержать данные о фирме: название, форма собственности, выручка, издержки.
Пример строки файла: firm_1 ООО 10000 5000.
Необходимо построчно прочитать файл, вычислить прибыль каждой компании, а также среднюю прибыль. Если фирма получила убытки, в расчет средней прибыли ее не включать.
Далее реализовать список. Он должен содержать словарь с фирмами и их прибылями, а также словарь со средней прибылью. Если фирма получила убытки, также добавить ее в словарь (со значением убытков).
Пример списка: [{“firm_1”: 5000, “firm_2”: 3000, “firm_3”: 1000}, {“average_profit”: 2000}].
Итоговый список сохранить в виде json-объекта в соответствующий файл.
Пример json-объекта:
[{"firm_1": 5000, "firm_2": 3000, "firm_3": 1000}, {"average_profit": 2000}]

Подсказка: использовать менеджеры контекста.
'''
import json

data = []
positive_profit = 0
positive_companies_counter = 0
with open('myfile.txt', 'r') as f:
	for line in f:
		data_raw = line[:-1].split()
		company = data_raw[0]
		profit = int(data_raw[2]) - int(data_raw[3])
		if profit >= 0:
			positive_profit += profit
			positive_companies_counter += 1
		data.append({company: profit})
	data.append({'average_profit': positive_profit/positive_companies_counter})

with open('data.json', 'w') as f:
    json.dump(data, f)




