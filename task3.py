# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление. Числа запрашивать у
# пользователя, предусмотреть обработку ситуации деления на ноль.

def division_of_two(a, b):
    """Вычисление частного двух чисел"""
    if b == 0:
        raise ValueError('Division by 0')
    return a / b




a = int(input('Введите число, которое хотите разделить: '))
b = int(input('Введите число, на которое хотите разделить: '))

print('Ответ: ', division_of_two(a, b))

# 2.Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя: имя, фамилия,
# год рождения, город проживания, email, email. Функция должна принимать параметры как именованные аргументы.
# Реализовать вывод данных о пользователе одной строкой.


def info(var_1, var_2, var_3, var_4, var_5, var_6):
    return f'имя - {var_1}; фамилия - {var_2}; год рождения - {var_3}; город проживания - {var_4}; email - {var_5};телефон - {var_6}'

print(info(var_1='Иван', var_2='Петров', var_3=1993, var_4='Москва', var_5='ivanp@pochta.ru', var_6='89999999999'))


# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента, и возвращает сумму наибольших двух
# аргументов.

def max_of_three(a, b, c):
    """
    Вычисление суммы двух наибольших аргументов
    :return: сумма
    """
    li = [a, b, c]
    li.sort(reverse=True)
    return li[0] + li[1]

print(max_of_three(1, 31, 122))

# 4. Программа принимает действительное положительное число x и целое отрицательное число y. Необходимо выполнить
# возведение числа x в степень y. Задание необходимо реализовать в виде функции my_func(x, y). При решении задания
# необходимо обойтись без встроенной функции возведения числа в степень.
#  Подсказка: попробуйте решить задачу двумя способами.
#  Первый — возведение в степень с помощью оператора.
#  Второй — более сложная реализация без оператора, предусматривающая использование цикла.

def raise_to_pow_1(x, y):
    """
    Возведение числа в степень

    :param x: действительное положительное число
    :param y: целое число
    :return: число x в степени y
    """
    return x**y


def raise_to_pow_2(x, y):
    """
    Возведение числа в отрицательную степень без использования оператора **

    :param x: действительное положительное число
    :param y: целое отрицательное число
    :return: число x в степени y
    """
    number = 1
    for i in range(abs(y)):
        number = number * x
    return 1 / number


print(raise_to_pow_1(2, -2))
print(raise_to_pow_2(2, -2))

# 5. Программа запрашивает у пользователя строку чисел, разделенных пробелом. При нажатии Enter должна выводиться
# сумма чисел. Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter. Сумма вновь
# введенных чисел будет добавляться к уже подсчитанной сумме. Но если вместо числа вводится специальный символ,
# выполнение программы завершается. Если специальный символ введен после нескольких чисел, то вначале нужно добавить
# сумму этих чисел к полученной ранее сумме и после этого завершить программу.


def sum_of_numbers(num_list):
    """
    Сложение элементов списка, в котором числа представлены строками

    :param num_list: список чисел, которые нужно сложить
    :return: сумма чисел в списке
    """
    result = 0
    for num in num_list:
        result += int(num)
    return result


res = 0
while True:
    numbers = input('Введите числа, разделенные пробелами, которые хотите просуммировать: ')
    numbers_list = numbers.split(' ')

    if numbers_list[-1] == 'q':
        res += sum_of_numbers(numbers_list[:-1])
        print(f'Сумма = {res}')
        print('Выход из программы')
        break

    res += sum_of_numbers(numbers_list)

    print(f'Сумма = {res}')


# 6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же,
# но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.
# Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом.
# Каждое слово состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки, но каждое слово должно
# начинаться с заглавной буквы. Необходимо использовать написанную ранее функцию int_func().


def int_func(word):
    """
    Капитализация первой буквы строки из строчных латинских букв
    :return: строка, начинающаяся с прописной буквы
    """
    return word[0].upper() + word[1:]


s = input('Введите слова из латинских букв в нижнем регистре, разделенные пробелами: ')
new_s = []

words = s.split(' ')
for word in words:
    new_s.append(int_func(word))

print(' '.join(new_s))
